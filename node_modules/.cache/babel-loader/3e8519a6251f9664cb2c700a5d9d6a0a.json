{"ast":null,"code":"var Types = require('../constants/types');\n\nvar Charsets = require('../constants/charsets');\n\nvar Field = require('./Field');\n\nvar IEEE_754_BINARY_64_PRECISION = Math.pow(2, 53);\nmodule.exports = RowDataPacket;\n\nfunction RowDataPacket() {}\n\nObject.defineProperty(RowDataPacket.prototype, 'parse', {\n  configurable: true,\n  enumerable: false,\n  value: parse\n});\nObject.defineProperty(RowDataPacket.prototype, '_typeCast', {\n  configurable: true,\n  enumerable: false,\n  value: typeCast\n});\n\nfunction parse(parser, fieldPackets, typeCast, nestTables, connection) {\n  var self = this;\n\n  var next = function next() {\n    return self._typeCast(fieldPacket, parser, connection.config.timezone, connection.config.supportBigNumbers, connection.config.bigNumberStrings, connection.config.dateStrings);\n  };\n\n  for (var i = 0; i < fieldPackets.length; i++) {\n    var fieldPacket = fieldPackets[i];\n    var value;\n\n    if (typeof typeCast === 'function') {\n      value = typeCast.apply(connection, [new Field({\n        packet: fieldPacket,\n        parser: parser\n      }), next]);\n    } else {\n      value = typeCast ? this._typeCast(fieldPacket, parser, connection.config.timezone, connection.config.supportBigNumbers, connection.config.bigNumberStrings, connection.config.dateStrings) : fieldPacket.charsetNr === Charsets.BINARY ? parser.parseLengthCodedBuffer() : parser.parseLengthCodedString();\n    }\n\n    if (typeof nestTables === 'string' && nestTables.length) {\n      this[fieldPacket.table + nestTables + fieldPacket.name] = value;\n    } else if (nestTables) {\n      this[fieldPacket.table] = this[fieldPacket.table] || {};\n      this[fieldPacket.table][fieldPacket.name] = value;\n    } else {\n      this[fieldPacket.name] = value;\n    }\n  }\n}\n\nfunction typeCast(field, parser, timeZone, supportBigNumbers, bigNumberStrings, dateStrings) {\n  var numberString;\n\n  switch (field.type) {\n    case Types.TIMESTAMP:\n    case Types.TIMESTAMP2:\n    case Types.DATE:\n    case Types.DATETIME:\n    case Types.DATETIME2:\n    case Types.NEWDATE:\n      var dateString = parser.parseLengthCodedString();\n\n      if (typeMatch(field.type, dateStrings)) {\n        return dateString;\n      }\n\n      if (dateString === null) {\n        return null;\n      }\n\n      var originalString = dateString;\n\n      if (field.type === Types.DATE) {\n        dateString += ' 00:00:00';\n      }\n\n      if (timeZone !== 'local') {\n        dateString += ' ' + timeZone;\n      }\n\n      var dt = new Date(dateString);\n\n      if (isNaN(dt.getTime())) {\n        return originalString;\n      }\n\n      return dt;\n\n    case Types.TINY:\n    case Types.SHORT:\n    case Types.LONG:\n    case Types.INT24:\n    case Types.YEAR:\n    case Types.FLOAT:\n    case Types.DOUBLE:\n      numberString = parser.parseLengthCodedString();\n      return numberString === null || field.zeroFill && numberString[0] === '0' ? numberString : Number(numberString);\n\n    case Types.NEWDECIMAL:\n    case Types.LONGLONG:\n      numberString = parser.parseLengthCodedString();\n      return numberString === null || field.zeroFill && numberString[0] === '0' ? numberString : supportBigNumbers && (bigNumberStrings || Number(numberString) >= IEEE_754_BINARY_64_PRECISION || Number(numberString) <= -IEEE_754_BINARY_64_PRECISION) ? numberString : Number(numberString);\n\n    case Types.BIT:\n      return parser.parseLengthCodedBuffer();\n\n    case Types.STRING:\n    case Types.VAR_STRING:\n    case Types.TINY_BLOB:\n    case Types.MEDIUM_BLOB:\n    case Types.LONG_BLOB:\n    case Types.BLOB:\n      return field.charsetNr === Charsets.BINARY ? parser.parseLengthCodedBuffer() : parser.parseLengthCodedString();\n\n    case Types.GEOMETRY:\n      return parser.parseGeometryValue();\n\n    default:\n      return parser.parseLengthCodedString();\n  }\n}\n\nfunction typeMatch(type, list) {\n  if (Array.isArray(list)) {\n    for (var i = 0; i < list.length; i++) {\n      if (Types[list[i]] === type) return true;\n    }\n\n    return false;\n  } else {\n    return Boolean(list);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}