{"ast":null,"code":"var Sequence = require('./Sequence');\n\nvar Util = require('util');\n\nvar Packets = require('../packets');\n\nvar ResultSet = require('../ResultSet');\n\nvar ServerStatus = require('../constants/server_status');\n\nvar fs = require('fs');\n\nvar Readable = require('readable-stream');\n\nmodule.exports = Query;\nUtil.inherits(Query, Sequence);\n\nfunction Query(options, callback) {\n  Sequence.call(this, options, callback);\n  this.sql = options.sql;\n  this.values = options.values;\n  this.typeCast = options.typeCast === undefined ? true : options.typeCast;\n  this.nestTables = options.nestTables || false;\n  this._resultSet = null;\n  this._results = [];\n  this._fields = [];\n  this._index = 0;\n  this._loadError = null;\n}\n\nQuery.prototype.start = function () {\n  this.emit('packet', new Packets.ComQueryPacket(this.sql));\n};\n\nQuery.prototype.determinePacket = function determinePacket(byte, parser) {\n  var resultSet = this._resultSet;\n\n  if (!resultSet) {\n    switch (byte) {\n      case 0x00:\n        return Packets.OkPacket;\n\n      case 0xff:\n        return Packets.ErrorPacket;\n\n      default:\n        return Packets.ResultSetHeaderPacket;\n    }\n  }\n\n  if (resultSet.eofPackets.length === 0) {\n    return resultSet.fieldPackets.length < resultSet.resultSetHeaderPacket.fieldCount ? Packets.FieldPacket : Packets.EofPacket;\n  }\n\n  if (byte === 0xff) {\n    return Packets.ErrorPacket;\n  }\n\n  if (byte === 0xfe && parser.packetLength() < 9) {\n    return Packets.EofPacket;\n  }\n\n  return Packets.RowDataPacket;\n};\n\nQuery.prototype['OkPacket'] = function (packet) {\n  // try...finally for exception safety\n  try {\n    if (!this._callback) {\n      this.emit('result', packet, this._index);\n    } else {\n      this._results.push(packet);\n\n      this._fields.push(undefined);\n    }\n  } finally {\n    this._index++;\n    this._resultSet = null;\n\n    this._handleFinalResultPacket(packet);\n  }\n};\n\nQuery.prototype['ErrorPacket'] = function (packet) {\n  var err = this._packetToError(packet);\n\n  var results = this._results.length > 0 ? this._results : undefined;\n  var fields = this._fields.length > 0 ? this._fields : undefined;\n  err.index = this._index;\n  err.sql = this.sql;\n  this.end(err, results, fields);\n};\n\nQuery.prototype['ResultSetHeaderPacket'] = function (packet) {\n  if (packet.fieldCount === null) {\n    this._sendLocalDataFile(packet.extra);\n  } else {\n    this._resultSet = new ResultSet(packet);\n  }\n};\n\nQuery.prototype['FieldPacket'] = function (packet) {\n  this._resultSet.fieldPackets.push(packet);\n};\n\nQuery.prototype['EofPacket'] = function (packet) {\n  this._resultSet.eofPackets.push(packet);\n\n  if (this._resultSet.eofPackets.length === 1 && !this._callback) {\n    this.emit('fields', this._resultSet.fieldPackets, this._index);\n  }\n\n  if (this._resultSet.eofPackets.length !== 2) {\n    return;\n  }\n\n  if (this._callback) {\n    this._results.push(this._resultSet.rows);\n\n    this._fields.push(this._resultSet.fieldPackets);\n  }\n\n  this._index++;\n  this._resultSet = null;\n\n  this._handleFinalResultPacket(packet);\n};\n\nQuery.prototype._handleFinalResultPacket = function (packet) {\n  if (packet.serverStatus & ServerStatus.SERVER_MORE_RESULTS_EXISTS) {\n    return;\n  }\n\n  var results = this._results.length > 1 ? this._results : this._results[0];\n  var fields = this._fields.length > 1 ? this._fields : this._fields[0];\n  this.end(this._loadError, results, fields);\n};\n\nQuery.prototype['RowDataPacket'] = function (packet, parser, connection) {\n  packet.parse(parser, this._resultSet.fieldPackets, this.typeCast, this.nestTables, connection);\n\n  if (this._callback) {\n    this._resultSet.rows.push(packet);\n  } else {\n    this.emit('result', packet, this._index);\n  }\n};\n\nQuery.prototype._sendLocalDataFile = function (path) {\n  var self = this;\n  var localStream = fs.createReadStream(path, {\n    flag: 'r',\n    encoding: null,\n    autoClose: true\n  });\n  this.on('pause', function () {\n    localStream.pause();\n  });\n  this.on('resume', function () {\n    localStream.resume();\n  });\n  localStream.on('data', function (data) {\n    self.emit('packet', new Packets.LocalDataFilePacket(data));\n  });\n  localStream.on('error', function (err) {\n    self._loadError = err;\n    localStream.emit('end');\n  });\n  localStream.on('end', function () {\n    self.emit('packet', new Packets.EmptyPacket());\n  });\n};\n\nQuery.prototype.stream = function (options) {\n  var self = this;\n  options = options || {};\n  options.objectMode = true;\n  var stream = new Readable(options);\n\n  stream._read = function () {\n    self._connection && self._connection.resume();\n  };\n\n  stream.once('end', function () {\n    process.nextTick(function () {\n      stream.emit('close');\n    });\n  });\n  this.on('result', function (row, i) {\n    if (!stream.push(row)) self._connection.pause();\n    stream.emit('result', row, i); // replicate old emitter\n  });\n  this.on('error', function (err) {\n    stream.emit('error', err); // Pass on any errors\n  });\n  this.on('end', function () {\n    stream.push(null); // pushing null, indicating EOF\n  });\n  this.on('fields', function (fields, i) {\n    stream.emit('fields', fields, i); // replicate old emitter\n  });\n  return stream;\n};","map":null,"metadata":{},"sourceType":"script"}