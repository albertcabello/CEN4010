{"ast":null,"code":"var _jsxFileName = \"/home/alexey/Desktop/CEN4010/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport routes from './routes';\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n\nvar express = require('express');\n\nvar app = express();\n\nvar morgan = require('morgan');\n\nvar mysql = require(\"mysql\");\n\nvar bodyParser = require('body-parser');\n\napp.use(morgan('short'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\nvar port = process.env.PORT || 3001;\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '12345678a',\n  database: 'Bookstore'\n});\napp.get('/book/:isbn', function (req, res) {\n  console.log(\"Fetching book with isbn: \" + req.params.isbn);\n  var ISBN = req.params.isbn;\n  var queryString = \"SELECT * FROM Book JOIN Description ON ISBN = descriptionID JOIN Author ON authorID = ID WHERE ISBN = ?\";\n  connection.query(queryString, [ISBN], function (err, rows, fields) {\n    if (err) {\n      console.log(\"Failed to query for book: \" + err);\n      res.sendStatus(500);\n      return; // throw err\n    }\n\n    var books = rows.map(function (row) {\n      return {\n        title: row.title,\n        authorFirst: row.authorFirst,\n        authorLast: row.authorLast,\n        cover: row.cover,\n        genre: row.genre,\n        publisher: row.publisher,\n        avgRating: row.avgRating,\n        description: row.description,\n        biography: row.bio,\n        price: row.price\n      };\n    });\n    res.json(books);\n    console.log(books[0]);\n  }); // res.end()\n});\napp.post('/author/:authorFirst/:authorLast', function (req, res) {\n  console.log(\"Fetching author info: \" + req.params.authorLast);\n  var firstName = req.params.authorFirst;\n  var lastName = req.params.authorLast;\n  var queryString = \"SELECT * FROM Book WHERE authorID IN (SELECT authorID FROM Author WHERE authorLast = ? )\";\n  connection.query(queryString, [lastName, firstName], function (err, rows, fields) {\n    if (err) {\n      console.log(\"Failed to query for book: \" + err);\n      res.sendStatus(500);\n      return; // throw err\n    }\n\n    var booksByAuthor = rows.map(function (row) {\n      return {\n        title: row.title,\n        cover: row.cover,\n        price: row.price\n      };\n    });\n    res.send(booksByAuthor);\n  });\n}); // localhost:3001\n\napp.listen(port, function () {\n  console.log('Server is up and listening on', port);\n});","map":{"version":3,"sources":["/home/alexey/Desktop/CEN4010/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","routes","render","document","getElementById","unregister","express","require","app","morgan","mysql","bodyParser","use","json","urlencoded","extended","port","process","env","PORT","connection","createConnection","host","user","password","database","get","req","res","console","log","params","isbn","ISBN","queryString","query","err","rows","fields","sendStatus","books","map","row","title","authorFirst","authorLast","cover","genre","publisher","avgRating","description","biography","bio","price","post","firstName","lastName","booksByAuthor","send","listen"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport routes from './routes';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\nconst express = require('express');\nconst app = express();\nconst morgan = require('morgan');\nconst mysql = require(\"mysql\");\nconst bodyParser = require('body-parser');\n\napp.use(morgan('short'))\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\n\nconst port = process.env.PORT || 3001\n\nconst connection = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: '12345678a',\n    database: 'Bookstore'\n  })\n\napp.get('/book/:isbn', (req, res) => {\n  console.log(\"Fetching book with isbn: \" + req.params.isbn)\n    const ISBN = req.params.isbn\n    const queryString =  \"SELECT * FROM Book JOIN Description ON ISBN = descriptionID JOIN Author ON authorID = ID WHERE ISBN = ?\"\n\n    connection.query(queryString, [ISBN], (err, rows, fields) => {\n      if (err) {\n        console.log(\"Failed to query for book: \" + err)\n        res.sendStatus(500)\n        return\n        // throw err\n      }\n  \n      const books = rows.map((row) => {\n        return {title: row.title,\n                authorFirst: row.authorFirst,\n                authorLast: row.authorLast,\n                cover: row.cover,\n                genre: row.genre,\n                publisher: row.publisher,\n                avgRating: row.avgRating,\n                description: row.description,\n                biography: row.bio,\n                price: row.price\n                }\n      })\n      res.json(books);\n      console.log(books[0]);\n    })\n\n    // res.end()\n  })\n\n  app.post('/author/:authorFirst/:authorLast', (req, res) => {\n    console.log(\"Fetching author info: \" + req.params.authorLast)\n    const firstName = req.params.authorFirst\n    const lastName = req.params.authorLast\n    const queryString = \"SELECT * FROM Book WHERE authorID IN (SELECT authorID FROM Author WHERE authorLast = ? )\"\n    connection.query(queryString, [lastName, firstName], (err, rows, fields) => {\n        if (err) {\n          console.log(\"Failed to query for book: \" + err)\n          res.sendStatus(500)\n          return\n          // throw err\n        }\n    \n        const booksByAuthor = rows.map((row) => {\n          return {title: row.title,\n                  cover: row.cover,\n                  price: row.price\n                  }\n        })\n    \n        res.send(booksByAuthor)\n      })\n})\n\n// localhost:3001\napp.listen(port, () => {\n  console.log('Server is up and listening on' , port)\n})"]},"metadata":{},"sourceType":"module"}