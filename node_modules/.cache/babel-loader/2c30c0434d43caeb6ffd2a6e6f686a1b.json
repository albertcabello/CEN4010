{"ast":null,"code":"var Buffer = require('safe-buffer').Buffer;\n\nvar Client = require('../constants/client');\n\nmodule.exports = HandshakeInitializationPacket;\n\nfunction HandshakeInitializationPacket(options) {\n  options = options || {};\n  this.protocolVersion = options.protocolVersion;\n  this.serverVersion = options.serverVersion;\n  this.threadId = options.threadId;\n  this.scrambleBuff1 = options.scrambleBuff1;\n  this.filler1 = options.filler1;\n  this.serverCapabilities1 = options.serverCapabilities1;\n  this.serverLanguage = options.serverLanguage;\n  this.serverStatus = options.serverStatus;\n  this.serverCapabilities2 = options.serverCapabilities2;\n  this.scrambleLength = options.scrambleLength;\n  this.filler2 = options.filler2;\n  this.scrambleBuff2 = options.scrambleBuff2;\n  this.filler3 = options.filler3;\n  this.pluginData = options.pluginData;\n  this.protocol41 = options.protocol41;\n\n  if (this.protocol41) {\n    // force set the bit in serverCapabilities1\n    this.serverCapabilities1 |= Client.CLIENT_PROTOCOL_41;\n  }\n}\n\nHandshakeInitializationPacket.prototype.parse = function (parser) {\n  this.protocolVersion = parser.parseUnsignedNumber(1);\n  this.serverVersion = parser.parseNullTerminatedString();\n  this.threadId = parser.parseUnsignedNumber(4);\n  this.scrambleBuff1 = parser.parseBuffer(8);\n  this.filler1 = parser.parseFiller(1);\n  this.serverCapabilities1 = parser.parseUnsignedNumber(2);\n  this.serverLanguage = parser.parseUnsignedNumber(1);\n  this.serverStatus = parser.parseUnsignedNumber(2);\n  this.protocol41 = (this.serverCapabilities1 & 1 << 9) > 0;\n\n  if (this.protocol41) {\n    this.serverCapabilities2 = parser.parseUnsignedNumber(2);\n    this.scrambleLength = parser.parseUnsignedNumber(1);\n    this.filler2 = parser.parseFiller(10); // scrambleBuff2 should be 0x00 terminated, but sphinx does not do this\n    // so we assume scrambleBuff2 to be 12 byte and treat the next byte as a\n    // filler byte.\n\n    this.scrambleBuff2 = parser.parseBuffer(12);\n    this.filler3 = parser.parseFiller(1);\n  } else {\n    this.filler2 = parser.parseFiller(13);\n  }\n\n  if (parser.reachedPacketEnd()) {\n    return;\n  } // According to the docs this should be 0x00 terminated, but MariaDB does\n  // not do this, so we assume this string to be packet terminated.\n\n\n  this.pluginData = parser.parsePacketTerminatedString(); // However, if there is a trailing '\\0', strip it\n\n  var lastChar = this.pluginData.length - 1;\n\n  if (this.pluginData[lastChar] === '\\0') {\n    this.pluginData = this.pluginData.substr(0, lastChar);\n  }\n};\n\nHandshakeInitializationPacket.prototype.write = function (writer) {\n  writer.writeUnsignedNumber(1, this.protocolVersion);\n  writer.writeNullTerminatedString(this.serverVersion);\n  writer.writeUnsignedNumber(4, this.threadId);\n  writer.writeBuffer(this.scrambleBuff1);\n  writer.writeFiller(1);\n  writer.writeUnsignedNumber(2, this.serverCapabilities1);\n  writer.writeUnsignedNumber(1, this.serverLanguage);\n  writer.writeUnsignedNumber(2, this.serverStatus);\n\n  if (this.protocol41) {\n    writer.writeUnsignedNumber(2, this.serverCapabilities2);\n    writer.writeUnsignedNumber(1, this.scrambleLength);\n    writer.writeFiller(10);\n  }\n\n  writer.writeNullTerminatedBuffer(this.scrambleBuff2);\n\n  if (this.pluginData !== undefined) {\n    writer.writeNullTerminatedString(this.pluginData);\n  }\n};\n\nHandshakeInitializationPacket.prototype.scrambleBuff = function () {\n  var buffer = null;\n\n  if (typeof this.scrambleBuff2 === 'undefined') {\n    buffer = Buffer.from(this.scrambleBuff1);\n  } else {\n    buffer = Buffer.allocUnsafe(this.scrambleBuff1.length + this.scrambleBuff2.length);\n    this.scrambleBuff1.copy(buffer, 0);\n    this.scrambleBuff2.copy(buffer, this.scrambleBuff1.length);\n  }\n\n  return buffer;\n};","map":null,"metadata":{},"sourceType":"script"}