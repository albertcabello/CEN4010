{"ast":null,"code":"var MAX_PACKET_LENGTH = Math.pow(2, 24) - 1;\nvar MUL_32BIT = Math.pow(2, 32);\n\nvar PacketHeader = require('./PacketHeader');\n\nvar BigNumber = require('bignumber.js');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar BufferList = require('./BufferList');\n\nmodule.exports = Parser;\n\nfunction Parser(options) {\n  options = options || {};\n  this._supportBigNumbers = options.config && options.config.supportBigNumbers;\n  this._buffer = Buffer.alloc(0);\n  this._nextBuffers = new BufferList();\n  this._longPacketBuffers = new BufferList();\n  this._offset = 0;\n  this._packetEnd = null;\n  this._packetHeader = null;\n  this._packetOffset = null;\n\n  this._onError = options.onError || function (err) {\n    throw err;\n  };\n\n  this._onPacket = options.onPacket || function () {};\n\n  this._nextPacketNumber = 0;\n  this._encoding = 'utf-8';\n  this._paused = false;\n}\n\nParser.prototype.write = function write(chunk) {\n  this._nextBuffers.push(chunk);\n\n  while (!this._paused) {\n    if (!this._packetHeader) {\n      if (!this._combineNextBuffers(4)) {\n        break;\n      }\n\n      this._packetHeader = new PacketHeader(this.parseUnsignedNumber(3), this.parseUnsignedNumber(1));\n\n      if (this._packetHeader.number !== this._nextPacketNumber) {\n        var err = new Error('Packets out of order. Got: ' + this._packetHeader.number + ' ' + 'Expected: ' + this._nextPacketNumber);\n        err.code = 'PROTOCOL_PACKETS_OUT_OF_ORDER';\n        err.fatal = true;\n\n        this._onError(err);\n      }\n\n      this.incrementPacketNumber();\n    }\n\n    if (!this._combineNextBuffers(this._packetHeader.length)) {\n      break;\n    }\n\n    this._packetEnd = this._offset + this._packetHeader.length;\n    this._packetOffset = this._offset;\n\n    if (this._packetHeader.length === MAX_PACKET_LENGTH) {\n      this._longPacketBuffers.push(this._buffer.slice(this._packetOffset, this._packetEnd));\n\n      this._advanceToNextPacket();\n\n      continue;\n    }\n\n    this._combineLongPacketBuffers(); // Try...finally to ensure exception safety. Unfortunately this is costing\n    // us up to ~10% performance in some benchmarks.\n\n\n    var hadException = true;\n\n    try {\n      this._onPacket(this._packetHeader);\n\n      hadException = false;\n    } catch (err) {\n      if (!err || typeof err.code !== 'string' || err.code.substr(0, 7) !== 'PARSER_') {\n        throw err; // Rethrow non-MySQL errors\n      } // Pass down parser errors\n\n\n      this._onError(err);\n\n      hadException = false;\n    } finally {\n      this._advanceToNextPacket(); // If we had an exception, the parser while loop will be broken out\n      // of after the finally block. So we need to make sure to re-enter it\n      // to continue parsing any bytes that may already have been received.\n\n\n      if (hadException) {\n        process.nextTick(this.write.bind(this));\n      }\n    }\n  }\n};\n\nParser.prototype.append = function append(chunk) {\n  if (!chunk || chunk.length === 0) {\n    return;\n  } // Calculate slice ranges\n\n\n  var sliceEnd = this._buffer.length;\n  var sliceStart = this._packetOffset === null ? this._offset : this._packetOffset;\n  var sliceLength = sliceEnd - sliceStart; // Get chunk data\n\n  var buffer = null;\n  var chunks = !(chunk instanceof Array || Array.isArray(chunk)) ? [chunk] : chunk;\n  var length = 0;\n  var offset = 0;\n\n  for (var i = 0; i < chunks.length; i++) {\n    length += chunks[i].length;\n  }\n\n  if (sliceLength !== 0) {\n    // Create a new Buffer\n    buffer = Buffer.allocUnsafe(sliceLength + length);\n    offset = 0; // Copy data slice\n\n    offset += this._buffer.copy(buffer, 0, sliceStart, sliceEnd); // Copy chunks\n\n    for (var i = 0; i < chunks.length; i++) {\n      offset += chunks[i].copy(buffer, offset);\n    }\n  } else if (chunks.length > 1) {\n    // Create a new Buffer\n    buffer = Buffer.allocUnsafe(length);\n    offset = 0; // Copy chunks\n\n    for (var i = 0; i < chunks.length; i++) {\n      offset += chunks[i].copy(buffer, offset);\n    }\n  } else {\n    // Buffer is the only chunk\n    buffer = chunks[0];\n  } // Adjust data-tracking pointers\n\n\n  this._buffer = buffer;\n  this._offset = this._offset - sliceStart;\n  this._packetEnd = this._packetEnd !== null ? this._packetEnd - sliceStart : null;\n  this._packetOffset = this._packetOffset !== null ? this._packetOffset - sliceStart : null;\n};\n\nParser.prototype.pause = function () {\n  this._paused = true;\n};\n\nParser.prototype.resume = function () {\n  this._paused = false; // nextTick() to avoid entering write() multiple times within the same stack\n  // which would cause problems as write manipulates the state of the object.\n\n  process.nextTick(this.write.bind(this));\n};\n\nParser.prototype.peak = function peak(offset) {\n  return this._buffer[this._offset + (offset >>> 0)];\n};\n\nParser.prototype.parseUnsignedNumber = function parseUnsignedNumber(bytes) {\n  if (bytes === 1) {\n    return this._buffer[this._offset++];\n  }\n\n  var buffer = this._buffer;\n  var offset = this._offset + bytes - 1;\n  var value = 0;\n\n  if (bytes > 4) {\n    var err = new Error('parseUnsignedNumber: Supports only up to 4 bytes');\n    err.offset = this._offset - this._packetOffset - 1;\n    err.code = 'PARSER_UNSIGNED_TOO_LONG';\n    throw err;\n  }\n\n  while (offset >= this._offset) {\n    value = (value << 8 | buffer[offset]) >>> 0;\n    offset--;\n  }\n\n  this._offset += bytes;\n  return value;\n};\n\nParser.prototype.parseLengthCodedString = function () {\n  var length = this.parseLengthCodedNumber();\n\n  if (length === null) {\n    return null;\n  }\n\n  return this.parseString(length);\n};\n\nParser.prototype.parseLengthCodedBuffer = function () {\n  var length = this.parseLengthCodedNumber();\n\n  if (length === null) {\n    return null;\n  }\n\n  return this.parseBuffer(length);\n};\n\nParser.prototype.parseLengthCodedNumber = function parseLengthCodedNumber() {\n  if (this._offset >= this._buffer.length) {\n    var err = new Error('Parser: read past end');\n    err.offset = this._offset - this._packetOffset;\n    err.code = 'PARSER_READ_PAST_END';\n    throw err;\n  }\n\n  var bits = this._buffer[this._offset++];\n\n  if (bits <= 250) {\n    return bits;\n  }\n\n  switch (bits) {\n    case 251:\n      return null;\n\n    case 252:\n      return this.parseUnsignedNumber(2);\n\n    case 253:\n      return this.parseUnsignedNumber(3);\n\n    case 254:\n      break;\n\n    default:\n      var err = new Error('Unexpected first byte' + (bits ? ': 0x' + bits.toString(16) : ''));\n      err.offset = this._offset - this._packetOffset - 1;\n      err.code = 'PARSER_BAD_LENGTH_BYTE';\n      throw err;\n  }\n\n  var low = this.parseUnsignedNumber(4);\n  var high = this.parseUnsignedNumber(4);\n  var value;\n\n  if (high >>> 21) {\n    value = new BigNumber(low).plus(new BigNumber(MUL_32BIT).times(high)).toString();\n\n    if (this._supportBigNumbers) {\n      return value;\n    }\n\n    var err = new Error('parseLengthCodedNumber: JS precision range exceeded, ' + 'number is >= 53 bit: \"' + value + '\"');\n    err.offset = this._offset - this._packetOffset - 8;\n    err.code = 'PARSER_JS_PRECISION_RANGE_EXCEEDED';\n    throw err;\n  }\n\n  value = low + MUL_32BIT * high;\n  return value;\n};\n\nParser.prototype.parseFiller = function (length) {\n  return this.parseBuffer(length);\n};\n\nParser.prototype.parseNullTerminatedBuffer = function () {\n  var end = this._nullByteOffset();\n\n  var value = this._buffer.slice(this._offset, end);\n\n  this._offset = end + 1;\n  return value;\n};\n\nParser.prototype.parseNullTerminatedString = function () {\n  var end = this._nullByteOffset();\n\n  var value = this._buffer.toString(this._encoding, this._offset, end);\n\n  this._offset = end + 1;\n  return value;\n};\n\nParser.prototype._nullByteOffset = function () {\n  var offset = this._offset;\n\n  while (this._buffer[offset] !== 0x00) {\n    offset++;\n\n    if (offset >= this._buffer.length) {\n      var err = new Error('Offset of null terminated string not found.');\n      err.offset = this._offset - this._packetOffset;\n      err.code = 'PARSER_MISSING_NULL_BYTE';\n      throw err;\n    }\n  }\n\n  return offset;\n};\n\nParser.prototype.parsePacketTerminatedBuffer = function parsePacketTerminatedBuffer() {\n  var length = this._packetEnd - this._offset;\n  return this.parseBuffer(length);\n};\n\nParser.prototype.parsePacketTerminatedString = function () {\n  var length = this._packetEnd - this._offset;\n  return this.parseString(length);\n};\n\nParser.prototype.parseBuffer = function (length) {\n  var response = Buffer.alloc(length);\n\n  this._buffer.copy(response, 0, this._offset, this._offset + length);\n\n  this._offset += length;\n  return response;\n};\n\nParser.prototype.parseString = function (length) {\n  var offset = this._offset;\n  var end = offset + length;\n\n  var value = this._buffer.toString(this._encoding, offset, end);\n\n  this._offset = end;\n  return value;\n};\n\nParser.prototype.parseGeometryValue = function () {\n  var buffer = this.parseLengthCodedBuffer();\n  var offset = 4;\n\n  if (buffer === null || !buffer.length) {\n    return null;\n  }\n\n  function parseGeometry() {\n    var result = null;\n    var byteOrder = buffer.readUInt8(offset);\n    offset += 1;\n    var wkbType = byteOrder ? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset);\n    offset += 4;\n\n    switch (wkbType) {\n      case 1:\n        // WKBPoint\n        var x = byteOrder ? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset);\n        offset += 8;\n        var y = byteOrder ? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset);\n        offset += 8;\n        result = {\n          x: x,\n          y: y\n        };\n        break;\n\n      case 2:\n        // WKBLineString\n        var numPoints = byteOrder ? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset);\n        offset += 4;\n        result = [];\n\n        for (var i = numPoints; i > 0; i--) {\n          var x = byteOrder ? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset);\n          offset += 8;\n          var y = byteOrder ? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset);\n          offset += 8;\n          result.push({\n            x: x,\n            y: y\n          });\n        }\n\n        break;\n\n      case 3:\n        // WKBPolygon\n        var numRings = byteOrder ? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset);\n        offset += 4;\n        result = [];\n\n        for (var i = numRings; i > 0; i--) {\n          var numPoints = byteOrder ? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset);\n          offset += 4;\n          var line = [];\n\n          for (var j = numPoints; j > 0; j--) {\n            var x = byteOrder ? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset);\n            offset += 8;\n            var y = byteOrder ? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset);\n            offset += 8;\n            line.push({\n              x: x,\n              y: y\n            });\n          }\n\n          result.push(line);\n        }\n\n        break;\n\n      case 4: // WKBMultiPoint\n\n      case 5: // WKBMultiLineString\n\n      case 6: // WKBMultiPolygon\n\n      case 7:\n        // WKBGeometryCollection\n        var num = byteOrder ? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset);\n        offset += 4;\n        var result = [];\n\n        for (var i = num; i > 0; i--) {\n          result.push(parseGeometry());\n        }\n\n        break;\n    }\n\n    return result;\n  }\n\n  return parseGeometry();\n};\n\nParser.prototype.reachedPacketEnd = function () {\n  return this._offset === this._packetEnd;\n};\n\nParser.prototype.incrementPacketNumber = function () {\n  var currentPacketNumber = this._nextPacketNumber;\n  this._nextPacketNumber = (this._nextPacketNumber + 1) % 256;\n  return currentPacketNumber;\n};\n\nParser.prototype.resetPacketNumber = function () {\n  this._nextPacketNumber = 0;\n};\n\nParser.prototype.packetLength = function packetLength() {\n  if (!this._packetHeader) {\n    return null;\n  }\n\n  return this._packetHeader.length + this._longPacketBuffers.size;\n};\n\nParser.prototype._combineNextBuffers = function _combineNextBuffers(bytes) {\n  var length = this._buffer.length - this._offset;\n\n  if (length >= bytes) {\n    return true;\n  }\n\n  if (length + this._nextBuffers.size < bytes) {\n    return false;\n  }\n\n  var buffers = [];\n  var bytesNeeded = bytes - length;\n\n  while (bytesNeeded > 0) {\n    var buffer = this._nextBuffers.shift();\n\n    buffers.push(buffer);\n    bytesNeeded -= buffer.length;\n  }\n\n  this.append(buffers);\n  return true;\n};\n\nParser.prototype._combineLongPacketBuffers = function _combineLongPacketBuffers() {\n  if (!this._longPacketBuffers.size) {\n    return;\n  } // Calculate bytes\n\n\n  var remainingBytes = this._buffer.length - this._offset;\n  var trailingPacketBytes = this._buffer.length - this._packetEnd; // Create buffer\n\n  var buf = null;\n  var buffer = Buffer.allocUnsafe(remainingBytes + this._longPacketBuffers.size);\n  var offset = 0; // Copy long buffers\n\n  while (buf = this._longPacketBuffers.shift()) {\n    offset += buf.copy(buffer, offset);\n  } // Copy remaining bytes\n\n\n  this._buffer.copy(buffer, offset, this._offset);\n\n  this._buffer = buffer;\n  this._offset = 0;\n  this._packetEnd = this._buffer.length - trailingPacketBytes;\n  this._packetOffset = 0;\n};\n\nParser.prototype._advanceToNextPacket = function () {\n  this._offset = this._packetEnd;\n  this._packetHeader = null;\n  this._packetEnd = null;\n  this._packetOffset = null;\n};","map":null,"metadata":{},"sourceType":"script"}