{"ast":null,"code":"var Buffer = require('safe-buffer').Buffer;\n\nvar Crypto = require('crypto');\n\nvar Auth = exports;\n\nfunction sha1(msg) {\n  var hash = Crypto.createHash('sha1');\n  hash.update(msg, 'binary');\n  return hash.digest('binary');\n}\n\nAuth.sha1 = sha1;\n\nfunction xor(a, b) {\n  a = Buffer.from(a, 'binary');\n  b = Buffer.from(b, 'binary');\n  var result = Buffer.allocUnsafe(a.length);\n\n  for (var i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ b[i];\n  }\n\n  return result;\n}\n\nAuth.xor = xor;\n\nAuth.token = function (password, scramble) {\n  if (!password) {\n    return Buffer.alloc(0);\n  } // password must be in binary format, not utf8\n\n\n  var stage1 = sha1(Buffer.from(password, 'utf8').toString('binary'));\n  var stage2 = sha1(stage1);\n  var stage3 = sha1(scramble.toString('binary') + stage2);\n  return xor(stage3, stage1);\n}; // This is a port of sql/password.c:hash_password which needs to be used for\n// pre-4.1 passwords.\n\n\nAuth.hashPassword = function (password) {\n  var nr = [0x5030, 0x5735];\n  var add = 7;\n  var nr2 = [0x1234, 0x5671];\n  var result = Buffer.alloc(8);\n\n  if (typeof password === 'string') {\n    password = Buffer.from(password);\n  }\n\n  for (var i = 0; i < password.length; i++) {\n    var c = password[i];\n\n    if (c === 32 || c === 9) {\n      // skip space in password\n      continue;\n    } // nr^= (((nr & 63)+add)*c)+ (nr << 8);\n    // nr = xor(nr, add(mul(add(and(nr, 63), add), c), shl(nr, 8)))\n\n\n    nr = this.xor32(nr, this.add32(this.mul32(this.add32(this.and32(nr, [0, 63]), [0, add]), [0, c]), this.shl32(nr, 8))); // nr2+=(nr2 << 8) ^ nr;\n    // nr2 = add(nr2, xor(shl(nr2, 8), nr))\n\n    nr2 = this.add32(nr2, this.xor32(this.shl32(nr2, 8), nr)); // add+=tmp;\n\n    add += c;\n  }\n\n  this.int31Write(result, nr, 0);\n  this.int31Write(result, nr2, 4);\n  return result;\n};\n\nAuth.randomInit = function (seed1, seed2) {\n  return {\n    max_value: 0x3FFFFFFF,\n    max_value_dbl: 0x3FFFFFFF,\n    seed1: seed1 % 0x3FFFFFFF,\n    seed2: seed2 % 0x3FFFFFFF\n  };\n};\n\nAuth.myRnd = function (r) {\n  r.seed1 = (r.seed1 * 3 + r.seed2) % r.max_value;\n  r.seed2 = (r.seed1 + r.seed2 + 33) % r.max_value;\n  return r.seed1 / r.max_value_dbl;\n};\n\nAuth.scramble323 = function (message, password) {\n  var to = Buffer.allocUnsafe(8);\n  var hashPass = this.hashPassword(password);\n  var hashMessage = this.hashPassword(message.slice(0, 8));\n  var seed1 = this.int32Read(hashPass, 0) ^ this.int32Read(hashMessage, 0);\n  var seed2 = this.int32Read(hashPass, 4) ^ this.int32Read(hashMessage, 4);\n  var r = this.randomInit(seed1, seed2);\n\n  for (var i = 0; i < 8; i++) {\n    to[i] = Math.floor(this.myRnd(r) * 31) + 64;\n  }\n\n  var extra = Math.floor(this.myRnd(r) * 31);\n\n  for (var i = 0; i < 8; i++) {\n    to[i] ^= extra;\n  }\n\n  return to;\n};\n\nAuth.xor32 = function (a, b) {\n  return [a[0] ^ b[0], a[1] ^ b[1]];\n};\n\nAuth.add32 = function (a, b) {\n  var w1 = a[1] + b[1];\n  var w2 = a[0] + b[0] + ((w1 & 0xFFFF0000) >> 16);\n  return [w2 & 0xFFFF, w1 & 0xFFFF];\n};\n\nAuth.mul32 = function (a, b) {\n  // based on this example of multiplying 32b ints using 16b\n  // http://www.dsprelated.com/showmessage/89790/1.php\n  var w1 = a[1] * b[1];\n  var w2 = (a[1] * b[1] >> 16 & 0xFFFF) + (a[0] * b[1] & 0xFFFF) + (a[1] * b[0] & 0xFFFF);\n  return [w2 & 0xFFFF, w1 & 0xFFFF];\n};\n\nAuth.and32 = function (a, b) {\n  return [a[0] & b[0], a[1] & b[1]];\n};\n\nAuth.shl32 = function (a, b) {\n  // assume b is 16 or less\n  var w1 = a[1] << b;\n  var w2 = a[0] << b | (w1 & 0xFFFF0000) >> 16;\n  return [w2 & 0xFFFF, w1 & 0xFFFF];\n};\n\nAuth.int31Write = function (buffer, number, offset) {\n  buffer[offset] = number[0] >> 8 & 0x7F;\n  buffer[offset + 1] = number[0] & 0xFF;\n  buffer[offset + 2] = number[1] >> 8 & 0xFF;\n  buffer[offset + 3] = number[1] & 0xFF;\n};\n\nAuth.int32Read = function (buffer, offset) {\n  return (buffer[offset] << 24) + (buffer[offset + 1] << 16) + (buffer[offset + 2] << 8) + buffer[offset + 3];\n};","map":null,"metadata":{},"sourceType":"script"}