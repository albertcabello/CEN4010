{"ast":null,"code":"/*!\n * on-headers\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Reference to Array slice.\n */\n\nvar slice = Array.prototype.slice;\n/**\n * Execute a listener when a response is about to write headers.\n *\n * @param {Object} res\n * @return {Function} listener\n * @api public\n */\n\nmodule.exports = function onHeaders(res, listener) {\n  if (!res) {\n    throw new TypeError('argument res is required');\n  }\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('argument listener must be a function');\n  }\n\n  res.writeHead = createWriteHead(res.writeHead, listener);\n};\n\nfunction createWriteHead(prevWriteHead, listener) {\n  var fired = false; // return function with core name and argument list\n\n  return function writeHead(statusCode) {\n    // set headers from arguments\n    var args = setWriteHeadHeaders.apply(this, arguments); // fire listener\n\n    if (!fired) {\n      fired = true;\n      listener.call(this); // pass-along an updated status code\n\n      if (typeof args[0] === 'number' && this.statusCode !== args[0]) {\n        args[0] = this.statusCode;\n        args.length = 1;\n      }\n    }\n\n    prevWriteHead.apply(this, args);\n  };\n}\n\nfunction setWriteHeadHeaders(statusCode) {\n  var length = arguments.length;\n  var headerIndex = length > 1 && typeof arguments[1] === 'string' ? 2 : 1;\n  var headers = length >= headerIndex + 1 ? arguments[headerIndex] : undefined;\n  this.statusCode = statusCode; // the following block is from node.js core\n\n  if (Array.isArray(headers)) {\n    // handle array case\n    for (var i = 0, len = headers.length; i < len; ++i) {\n      this.setHeader(headers[i][0], headers[i][1]);\n    }\n  } else if (headers) {\n    // handle object case\n    var keys = Object.keys(headers);\n\n    for (var i = 0; i < keys.length; i++) {\n      var k = keys[i];\n      if (k) this.setHeader(k, headers[k]);\n    }\n  } // copy leading arguments\n\n\n  var args = new Array(Math.min(length, headerIndex));\n\n  for (var i = 0; i < args.length; i++) {\n    args[i] = arguments[i];\n  }\n\n  return args;\n}","map":null,"metadata":{},"sourceType":"script"}